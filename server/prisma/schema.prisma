generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Admin
  Sales
  ProjectManager
  Production
  Client
  QA
}

model User {
  userId            Int              @id @default(autoincrement())
  username          String           @unique
  profilePictureUrl String?
  role              Role?
  teamName          String?
  password          String
  attachments       Attachment[]
  comments          Comment[]
  assignedTasks     Task[]           @relation("TaskAssignee")
  authoredTasks     Task[]           @relation("TaskAuthor")
  taskAssignments   TaskAssignment[]
  team              Team?            @relation(fields: [teamName], references: [teamName])
}

model Team {
  id                   Int           @id @default(autoincrement())
  teamName             String        @unique
  productOwnerUserId   Int?
  projectManagerUserId Int?
  projectTeams         ProjectTeam[]
  user                 User[]
}

model Project {
  id           Int           @id @default(autoincrement())
  name         String
  description  String?
  startDate    DateTime?
  endDate      DateTime?
  projectTeams ProjectTeam[]
  tasks        Task[]
}

model ProjectTeam {
  id        Int     @id @default(autoincrement())
  teamId    Int
  projectId Int
  project   Project @relation(fields: [projectId], references: [id])
  team      Team    @relation(fields: [teamId], references: [id])
}

model Task {
  id              Int              @id @default(autoincrement())
  title           String
  description     String?
  status          String?
  priority        String?
  tags            String?
  startDate       DateTime?
  dueDate         DateTime?
  points          Int?
  projectId       Int
  authorUserId    Int
  assignedUserId  Int?
  attachments     Attachment[]
  comments        Comment[]
  assignee        User?            @relation("TaskAssignee", fields: [assignedUserId], references: [userId])
  author          User             @relation("TaskAuthor", fields: [authorUserId], references: [userId])
  project         Project          @relation(fields: [projectId], references: [id])
  taskAssignments TaskAssignment[]
}

model TaskAssignment {
  id     Int  @id @default(autoincrement())
  userId Int
  taskId Int
  task   Task @relation(fields: [taskId], references: [id])
  user   User @relation(fields: [userId], references: [userId])
}

model Attachment {
  id           Int     @id @default(autoincrement())
  fileURL      String
  fileName     String?
  taskId       Int
  uploadedById Int
  task         Task    @relation(fields: [taskId], references: [id])
  uploadedBy   User    @relation(fields: [uploadedById], references: [userId])
}

model Comment {
  id     Int    @id @default(autoincrement())
  text   String
  taskId Int
  userId Int
  task   Task   @relation(fields: [taskId], references: [id])
  user   User   @relation(fields: [userId], references: [userId])
}
